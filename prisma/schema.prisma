generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @unique(map: "Account_pk2")
  userId            String
  type              String
  provider          String
  providerAccountId String  @unique(map: "Account_pk")
  refresh_token     String?
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  riotID            String?
  User              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  Player            Player?

  @@unique([provider, providerAccountId])
  @@index([userId], map: "Account_userId_fkey")
}

model AgentStats {
  agent            String  @id
  role             String?
  kills            Int?
  assists          Int?
  rounds           Int?
  kpr              Float?
  kpr_above_avg    Float?
  kpr_mod          Float?
  apr              Float?
  apr_above_avg    Float?
  apr_mod          Float?
  avg_norm_rr      Float?
  avg_final_rating Float?
  games_played     Int?
}

model ControlPanel {
  id    Int     @id @default(autoincrement())
  value String? @db.LongText
}

model Faq {
  id       Int     @id @default(autoincrement())
  question String
  answer   String  @db.VarChar(999)
  doShow   Boolean @default(true)
}

model Franchise {
  id                                 Int        @id @default(autoincrement())
  name                               String
  slug                               String     @unique(map: "teams_unique")
  logoFileName                       String?    @default("404.png")
  isActive                           Boolean    @default(true)
  roleID                             String
  emoteID                            String
  gmID                               String
  Schedule_Schedule_team1ToFranchise Schedule[] @relation("Schedule_team1ToFranchise")
  Schedule_Schedule_team2ToFranchise Schedule[] @relation("Schedule_team2ToFranchise")
  Team                               Team[]
}

model Games {
  id                      String        @id @db.VarChar(255)
  type                    String?       @db.VarChar(255)
  seasonID                Int           @default(5)
  team1                   Int?
  team2                   Int?
  date_played             DateTime?     @db.DateTime(6)
  match_num               Int?
  game_num                Int?
  rounds_played           Int
  rounds_won_t1           Int?
  rounds_won_t2           Int?
  winner                  Int?
  avgRank                 Int?
  Team_Games_team1ToTeam  Team?         @relation("Games_team1ToTeam", fields: [team1], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "Games_Team_id_fk")
  Team_Games_team2ToTeam  Team?         @relation("Games_team2ToTeam", fields: [team2], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "Games_Team_id_fk2")
  Team_Games_winnerToTeam Team?         @relation("Games_winnerToTeam", fields: [winner], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "Games_Team_id_fk3")
  PlayerStats             PlayerStats[]

  @@index([team1], map: "Games_Team_id_fk")
  @@index([team2], map: "Games_Team_id_fk2")
  @@index([winner], map: "Games_Team_id_fk3")
}

model MCWhitelist {
  uuid String @id @unique(map: "MCWhitelist_pk")
  name String
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model MMR {
  id                     Int       @id @default(autoincrement())
  riotId                 String?   @unique(map: "MMR_pk") @db.VarChar(255)
  num_ranked             Int       @default(0)
  mmr_ranked             Int       @default(0)
  num_combines           Int       @default(0)
  mmr_combines           Int       @default(0)
  num_prev_season        Int       @default(0)
  mmr_prev_season        Int       @default(0)
  mmr_overall            Int       @default(0)
  lastPulled             DateTime? @default(dbgenerated("('2023-10-01')")) @db.Date
  Player_Player_MMRToMMR Player[]  @relation("Player_MMRToMMR")
}

model ModLogs {
  id Int @id @default(autoincrement())
}

model Player {
  id                  String        @id
  userID              String        @unique(map: "Player_pk")
  team                Int?
  primaryRiotID       String?       @unique(map: "Player_pk3")
  status              Int           @default(0)
  isReturning         Boolean?      @default(false)
  MMR                 Int?
  contractStatus      Int?          @default(3)
  Account             Account?      @relation(fields: [primaryRiotID], references: [providerAccountId], map: "Player_Account_providerAccountId_fk")
  MMR_Player_MMRToMMR MMR?          @relation("Player_MMRToMMR", fields: [MMR], references: [id], onDelete: Restrict, map: "Player_MMR_id_fk")
  Team                Team?         @relation(fields: [team], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "Player_Team_id_fk")
  User                User          @relation(fields: [userID], references: [id], onDelete: Cascade, map: "Player_User_id_fk")
  PlayerStats         PlayerStats[]

  @@index([MMR], map: "Player_MMR_id_fk")
  @@index([team], map: "Player_Team_id_fk")
}

model PlayerStats {
  id                  Int     @id @default(autoincrement())
  riotId              String? @db.VarChar(255)
  gameID              String? @db.VarChar(255)
  agent               String? @db.VarChar(255)
  rating_atk          Float?
  rating_def          Float?
  acs                 Int
  kast                Float?
  hs_percent          Float?
  total_kills         Int
  total_deaths        Int
  total_assists       Int
  total_first_kills   Int
  total_first_deaths  Int
  total_plants        Int
  total_defuses       Int
  total_trade_deaths  Int
  total_trade_kills   Int
  total_eco_kills     Int
  total_antieco_kills Int
  total_clutches      Int?
  pr_kills            Float?
  pr_assists          Float?
  pr_deaths           Float?
  pr_first_kills      Float?
  pr_first_deaths     Float?
  pr_damage           Float?
  total_exit_kills    Int?
  Games               Games?  @relation(fields: [gameID], references: [id], onDelete: Cascade, map: "PlayerStats_PastGames_id_fk")
  Player              Player? @relation(fields: [riotId], references: [primaryRiotID], map: "PlayerStats_Player_primaryRiotID_fk")

  @@index([agent], map: "PlayerStats_AgentStats_agent_fk")
  @@index([gameID], map: "PlayerStats_PastGames_id_fk")
  @@index([riotId], map: "PlayerStats_Player_primaryRiotID_fk")
}

model Schedule {
  id                                  Int        @id @default(autoincrement())
  date                                DateTime?  @default(dbgenerated("(curdate())"))
  team1                               Int?
  team2                               Int
  isMOTW                              Boolean    @default(false)
  tier                                String     @default("premier")
  Franchise_Schedule_team1ToFranchise Franchise? @relation("Schedule_team1ToFranchise", fields: [team1], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "Schedule_Teams_id_fk")
  Franchise_Schedule_team2ToFranchise Franchise  @relation("Schedule_team2ToFranchise", fields: [team2], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "Schedule_Teams_id_fk2")

  @@index([team1], map: "Schedule_Teams_id_fk")
  @@index([team2], map: "Schedule_Teams_id_fk2")
}

model Session {
  id           String   @id
  sessionToken String   @unique
  userId       String
  expires      DateTime
  User         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "Session_userId_fkey")
}

model Stream {
  id         Int     @id @default(autoincrement())
  isLive     Boolean @default(false)
  streamLink String
  message    String?
}

model Team {
  id                       Int       @id @unique(map: "id") @default(autoincrement())
  franchise                Int
  name                     String?   @unique(map: "Team_pk2")
  tier                     String?
  isActive                 Boolean?  @default(true)
  Games_Games_team1ToTeam  Games[]   @relation("Games_team1ToTeam")
  Games_Games_team2ToTeam  Games[]   @relation("Games_team2ToTeam")
  Games_Games_winnerToTeam Games[]   @relation("Games_winnerToTeam")
  Player                   Player[]
  Franchise                Franchise @relation(fields: [franchise], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "Team_Franchise_slug_fk")

  @@index([franchise], map: "Team_Franchise_slug_fk")
}

model TempContract {
  discID          String @id @default("0") @db.VarChar(255)
  contractcurrent Int?
  team            Int?
}

model Transactions {
  id      Int       @id @default(autoincrement())
  date    DateTime  @default(now()) @db.Timestamp(0)
  season  Int       @default(3)
  type    String
  team1   String
  team2   String?
  tier    String?
  player  String
  expires DateTime? @db.Date
}

model User {
  id            String    @id
  name          String?
  email         String?
  emailVerified DateTime?
  image         String?
  isStaff       Boolean   @default(false)
  userLevel     Int       @default(0)
  Account       Account[]
  Player        Player?
  Session       Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
