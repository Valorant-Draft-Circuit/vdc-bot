const { ChatInputCommandInteraction } = require(`discord.js`);
const fs = require(`fs`);

const reportFiles = fs.readdirSync(`./src/interactions/subcommands/report`).filter(f => f.endsWith(`.js`) && f !== `_template.js`);
const reportCollection = [];

reportFiles.forEach(reportFile => {
    const reportPath = `../subcommands/report/${reportFile}`;
    const command = require(reportPath);
    reportCollection.push(command);
});


module.exports = {

    name: `report`,

    async execute(/** @type ChatInputCommandInteraction */ interaction) {
        await interaction.deferReply();

        const user = interaction.user;
        const { _hoistedOptions } = interaction.options;

        // console.log(_hoistedOptions)
        const reportRequest = _hoistedOptions.find(o => o.name === `type`).value;
        const args = _hoistedOptions.find(o => o.name === `args`)?.value;

        // console.log(args);
        let extention = `r`;
        let report = `Report generated by ${user.username} at ${(new Date()).toLocaleString()}\n\n${``.padEnd(65, `-`)}\n\n`;

        // fetch the report generator from the collection
        const reportGenerator = reportCollection.find(r => r.name === reportRequest);
        if (!reportGenerator) {
            report += `There was an error generating the report - could not find the "${reportRequest}" report generator.\nPlease try again later.`;

            fs.writeFileSync(`./cache/report.${extention}`, report);
            return await interaction.editReply({ content: `This is a work in progress!`, files: [`./cache/report.${extention}`] });
        }

        // if the args is "--help", show the help response
        if (args?.includes(`--help`)) {
            const response = [
                `${reportGenerator.helpResponse}`,
                reportGenerator.args ? `Arguments : ${reportGenerator.args.map(a => `\`${a}\``).join(`, `)}` : ``,
            ].filter(rv => rv != ``).join(`\n\n`);

            return await interaction.editReply({ content: response });
        }

        // check if the report generator has arguments
        if (args && !reportGenerator.args) return await interaction.editReply({ content: `The \`${reportGenerator.readable}\` report does not take any arguments` });

        // check arguments against base arguments list
        const argBase = reportGenerator.args?.map(a => a.match(/--\w+/)[0]);
        if (args && reportGenerator.args && !argBase.includes(args.match(/--\w+/) ? args.match(/--\w+/)[0] : false)) {
            return await interaction.editReply({ content: `The \`${reportGenerator.readable}\` report does not take \`${args}\` as an argument` });
        }

        // run the report generator & override the extention if needed
        const { extentionOverride, text } = await reportGenerator.generate(args);
        if (extentionOverride) extention = extentionOverride;

        // add the text to the report
        report += text;

        // output the report to a file & send it
        fs.writeFileSync(`./cache/report.${extention}`, report);
        return await interaction.editReply({ content: `This is a work in progress!`, files: [`./cache/report.${extention}`] });
    }
};
