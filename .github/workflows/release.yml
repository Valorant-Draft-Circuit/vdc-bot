name: Create Release on PR Merge

on:
  pull_request:
    types:
      - closed  # Runs when a PR is merged or closed

jobs:
  release:
    if: github.event.pull_request.merged == true && github.event.pull_request.base.ref == 'main'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Extract version from PR description
        id: extract_version
        run: |
          PR_BODY="${{ github.event.pull_request.body }}"

          # Extract version from Markdown table
          VERSION=$(echo "$PR_BODY" | awk '/\| Version \|/ {found=1; next} found && /^\| *[0-9]+\.[0-9]+\.[0-9]+ *\|/ {print $2; exit}' | tr -d '|[:space:]')

          # Validate extracted version format
          if [[ -n "$VERSION" && ! "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "❌ Invalid version format: $VERSION (expected X.Y.Z)"
            exit 1
          fi

          # If no version was found, auto-increment the latest release version
          if [[ -z "$VERSION" ]]; then
            echo "🔎 No version found in PR, fetching latest release..."

            # Fetch latest tag from GitHub Releases
            LATEST_TAG=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                          "https://api.github.com/repos/${{ github.repository }}/releases/latest" | jq -r .tag_name)

            if [[ "$LATEST_TAG" == "null" || -z "$LATEST_TAG" ]]; then
              echo "⚠️ No previous release found, defaulting to 1.0.0"
              VERSION="1.0.0"
            else
              # Increment patch version (X.Y.Z → X.Y.(Z+1))
              MAJOR=$(echo "$LATEST_TAG" | cut -d. -f1)
              MINOR=$(echo "$LATEST_TAG" | cut -d. -f2)
              PATCH=$(echo "$LATEST_TAG" | cut -d. -f3)
              PATCH=$((PATCH + 1))
              VERSION="$MAJOR.$MINOR.$PATCH"
              echo "🔄 Auto-incremented version: $VERSION"
            fi
          fi

          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Extract Changelog from PR description
        id: extract_changelog
        run: |
          PR_BODY="${{ github.event.pull_request.body }}"

          # Extract changelog content (all text below the Version table)
          CHANGELOG=$(echo "$PR_BODY" | awk '/\| Version \|/ {found=1; next} found {print}' | tail -n +3)

          if [[ -z "$CHANGELOG" ]]; then
            CHANGELOG="No changelog provided."
          fi

          echo "CHANGELOG<<EOF" >> $GITHUB_ENV
          echo "$CHANGELOG" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.VERSION }}
          name: Release ${{ env.VERSION }}
          body: |
            ## Changelog
            ${{ env.CHANGELOG }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}